// test-cases/specs/commands/mv/wildcard.test.js
// Tests sp√©cialis√©s pour les wildcards avec la commande mv

import { createTestContext, clearCaptures, getCaptures } from '../../../lib/context.js';
import { assert, validateFileSystem, testUtils } from '../../../lib/helpers.js';
import { createTest } from '../../../lib/runner.js';
import { cmdMv } from '../../../../bin/mv/mv.js';
import { cmdMkdir } from '../../../../bin/mkdir/mkdir.js';

/**
 * Fonction utilitaire pour cr√©er une structure de fichiers de test avec extensions vari√©es
 * Cette fonction pr√©pare un environnement contr√¥l√© pour tester les patterns de wildcards
 */
function createTestFilesWithExtensions(context) {
    // Fichiers avec extensions diverses pour tester *.*
    testUtils.createTestFile(context, '/root/document.txt', 'contenu document');
    testUtils.createTestFile(context, '/root/image.png', 'contenu image');
    testUtils.createTestFile(context, '/root/script.js', 'contenu script');
    testUtils.createTestFile(context, '/root/data.json', 'contenu data');
    
    // Fichiers .text sp√©cifiques pour tester *.text
    testUtils.createTestFile(context, '/root/readme.text', 'contenu readme');
    testUtils.createTestFile(context, '/root/notes.text', 'contenu notes');
    testUtils.createTestFile(context, '/root/manual.text', 'contenu manual');
    
    // Fichiers cach√©s pour tester .**
    testUtils.createTestFile(context, '/root/.bashrc', 'contenu bashrc');
    testUtils.createTestFile(context, '/root/.profile', 'contenu profile');
    testUtils.createTestFile(context, '/root/.hidden', 'contenu hidden');
    
    // Fichiers sans extension pour v√©rifier que les patterns ne les affectent pas
    testUtils.createTestFile(context, '/root/README', 'contenu readme sans extension');
    testUtils.createTestFile(context, '/root/makefile', 'contenu makefile');
    
    // Cr√©er un r√©pertoire de destination pour les tests
    cmdMkdir(['destination-dir'], context);
}

/**
 * Test 1: mv *.* vers un r√©pertoire (cas de succ√®s)
 * Ce test v√©rifie le comportement normal quand plusieurs fichiers avec extension
 * sont d√©plac√©s vers un r√©pertoire existant
 */
function testWildcardAllExtensionsToDirectory() {
    console.log('üß™ TEST WILDCARD: mv *.* vers r√©pertoire');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er notre structure de test
    createTestFilesWithExtensions(context);
    
    // V√©rifier que nos fichiers avec extension existent bien
    assert.fileExists(context, '/root/document.txt', 'document.txt devrait exister');
    assert.fileExists(context, '/root/image.png', 'image.png devrait exister');
    assert.fileExists(context, '/root/script.js', 'script.js devrait exister');
    assert.fileExists(context, '/root/data.json', 'data.json devrait exister');
    assert.fileExists(context, '/root/destination-dir', 'Le r√©pertoire de destination devrait exister');
    
    // Effectuer le d√©placement avec wildcard
    // Note: En r√©alit√©, c'est le shell qui expanse les wildcards avant de passer les arguments √† mv
    // Nous simulons donc ce comportement en passant la liste expand√©e
    cmdMv(['document.txt', 'image.png', 'script.js', 'data.json', 'destination-dir'], context);
    
    // V√©rifier que tous les fichiers ont √©t√© d√©plac√©s dans le r√©pertoire
    assert.fileExists(context, '/root/destination-dir/document.txt', 'document.txt devrait √™tre dans destination-dir');
    assert.fileExists(context, '/root/destination-dir/image.png', 'image.png devrait √™tre dans destination-dir');
    assert.fileExists(context, '/root/destination-dir/script.js', 'script.js devrait √™tre dans destination-dir');
    assert.fileExists(context, '/root/destination-dir/data.json', 'data.json devrait √™tre dans destination-dir');
    
    // V√©rifier que les fichiers originaux n'existent plus
    assert.fileNotExists(context, '/root/document.txt', 'document.txt ne devrait plus exister √† la racine');
    assert.fileNotExists(context, '/root/image.png', 'image.png ne devrait plus exister √† la racine');
    assert.fileNotExists(context, '/root/script.js', 'script.js ne devrait plus exister √† la racine');
    assert.fileNotExists(context, '/root/data.json', 'data.json ne devrait plus exister √† la racine');
    
    // V√©rifier que les fichiers sans extension et cach√©s ne sont pas affect√©s
    assert.fileExists(context, '/root/README', 'README devrait toujours exister');
    assert.fileExists(context, '/root/.bashrc', '.bashrc devrait toujours exister');
    
    console.log('‚úÖ Wildcard *.* vers r√©pertoire fonctionne');
    return true;
}

/**
 * Test 2: mv *.text vers un r√©pertoire (pattern sp√©cifique)
 * Ce test v√©rifie qu'un pattern plus sp√©cifique ne d√©place que les fichiers correspondants
 */
function testWildcardSpecificExtensionToDirectory() {
    console.log('üß™ TEST WILDCARD: mv *.text vers r√©pertoire');
    
    clearCaptures();
    const context = createTestContext();
    
    createTestFilesWithExtensions(context);
    
    // V√©rifier que nos fichiers .text existent
    assert.fileExists(context, '/root/readme.text', 'readme.text devrait exister');
    assert.fileExists(context, '/root/notes.text', 'notes.text devrait exister');
    assert.fileExists(context, '/root/manual.text', 'manual.text devrait exister');
    
    // D√©placer seulement les fichiers .text (simulation de l'expansion du shell)
    cmdMv(['readme.text', 'notes.text', 'manual.text', 'destination-dir'], context);
    
    // V√©rifier que seuls les fichiers .text ont √©t√© d√©plac√©s
    assert.fileExists(context, '/root/destination-dir/readme.text', 'readme.text devrait √™tre d√©plac√©');
    assert.fileExists(context, '/root/destination-dir/notes.text', 'notes.text devrait √™tre d√©plac√©');
    assert.fileExists(context, '/root/destination-dir/manual.text', 'manual.text devrait √™tre d√©plac√©');
    
    // V√©rifier que les autres fichiers ne sont pas affect√©s
    assert.fileExists(context, '/root/document.txt', 'document.txt ne devrait pas √™tre d√©plac√©');
    assert.fileExists(context, '/root/image.png', 'image.png ne devrait pas √™tre d√©plac√©');
    assert.fileExists(context, '/root/.bashrc', '.bashrc ne devrait pas √™tre d√©plac√©');
    
    console.log('‚úÖ Wildcard *.text vers r√©pertoire fonctionne');
    return true;
}

/**
 * Test 3: mv .** vers un r√©pertoire (fichiers cach√©s)
 * Ce test v√©rifie le d√©placement des fichiers cach√©s (commen√ßant par un point)
 */
function testWildcardHiddenFilesToDirectory() {
    console.log('üß™ TEST WILDCARD: mv .** vers r√©pertoire');
    
    clearCaptures();
    const context = createTestContext();
    
    createTestFilesWithExtensions(context);
    
    // V√©rifier que nos fichiers cach√©s existent
    assert.fileExists(context, '/root/.bashrc', '.bashrc devrait exister');
    assert.fileExists(context, '/root/.profile', '.profile devrait exister');
    assert.fileExists(context, '/root/.hidden', '.hidden devrait exister');
    
    // D√©placer les fichiers cach√©s (simulation de l'expansion .*)
    cmdMv(['.bashrc', '.profile', '.hidden', 'destination-dir'], context);
    
    // V√©rifier que les fichiers cach√©s ont √©t√© d√©plac√©s
    assert.fileExists(context, '/root/destination-dir/.bashrc', '.bashrc devrait √™tre d√©plac√©');
    assert.fileExists(context, '/root/destination-dir/.profile', '.profile devrait √™tre d√©plac√©');
    assert.fileExists(context, '/root/destination-dir/.hidden', '.hidden devrait √™tre d√©plac√©');
    
    // V√©rifier que les fichiers non-cach√©s ne sont pas affect√©s
    assert.fileExists(context, '/root/document.txt', 'document.txt ne devrait pas √™tre d√©plac√©');
    assert.fileExists(context, '/root/README', 'README ne devrait pas √™tre d√©plac√©');
    
    console.log('‚úÖ Wildcard .** vers r√©pertoire fonctionne');
    return true;
}

/**
 * Test 4: mv *.* vers un fichier (cas d'erreur)
 * Ce test v√©rifie que mv refuse de d√©placer plusieurs fichiers vers une destination
 * qui n'est pas un r√©pertoire
 */
function testWildcardMultipleFilesToNonDirectory() {
    console.log('üß™ TEST WILDCARD: mv *.* vers fichier (erreur attendue)');
    
    clearCaptures();
    const context = createTestContext();
    
    createTestFilesWithExtensions(context);
    
    // Cr√©er un fichier cible (pas un r√©pertoire)
    testUtils.createTestFile(context, '/root/target-file.txt', 'fichier cible');
    
    // Tenter de d√©placer plusieurs fichiers vers un fichier unique
    // En pratique, mv devrait refuser cette op√©ration
    cmdMv(['document.txt', 'image.png', 'target-file.txt'], context);
    
    // V√©rifier qu'une erreur a √©t√© g√©n√©r√©e
    const captures = getCaptures();
    const hasError = captures.some(capture => 
        capture.className === 'error' && 
        (capture.text.includes('destination doit √™tre un r√©pertoire') ||
         capture.text.includes('target is not a directory'))
    );
    
    assert.isTrue(hasError, 'Une erreur devrait √™tre g√©n√©r√©e pour d√©placement multiple vers non-r√©pertoire');
    
    // V√©rifier que les fichiers sources n'ont pas √©t√© modifi√©s
    assert.fileExists(context, '/root/document.txt', 'document.txt devrait toujours exister');
    assert.fileExists(context, '/root/image.png', 'image.png devrait toujours exister');
    
    console.log('‚úÖ Erreur correcte pour wildcard vers non-r√©pertoire');
    return true;
}

/**
 * Test 5: mv avec un seul fichier correspondant au wildcard
 * Ce test v√©rifie que si le wildcard ne correspond qu'√† un seul fichier,
 * mv fonctionne normalement (renommage/d√©placement simple)
 */
function testWildcardSingleFileMatch() {
    console.log('üß™ TEST WILDCARD: un seul fichier correspondant');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er un seul fichier .unique pour tester
    testUtils.createTestFile(context, '/root/special.unique', 'contenu sp√©cial');
    
    // Le pattern *.unique ne devrait correspondre qu'√† ce fichier
    cmdMv(['special.unique', 'renamed-special.unique'], context);
    
    // V√©rifier le renommage r√©ussi
    assert.fileNotExists(context, '/root/special.unique', 'Le fichier original ne devrait plus exister');
    assert.fileExists(context, '/root/renamed-special.unique', 'Le fichier renomm√© devrait exister');
    
    const renamedFile = context.fileSystem['/root/renamed-special.unique'];
    assert.equals(renamedFile.content, 'contenu sp√©cial', 'Le contenu devrait √™tre pr√©serv√©');
    
    console.log('‚úÖ Wildcard avec un seul match fonctionne');
    return true;
}

/**
 * Test 6: mv avec wildcard ne correspondant √† aucun fichier
 * Ce test v√©rifie le comportement quand le pattern ne trouve aucun fichier
 */
function testWildcardNoMatch() {
    console.log('üß™ TEST WILDCARD: aucun fichier correspondant');
    
    clearCaptures();
    const context = createTestContext();
    
    createTestFilesWithExtensions(context);
    
    // Tenter d'utiliser un pattern qui ne correspond √† rien
    cmdMv(['*.nonexistent', 'destination'], context);
    
    // V√©rifier qu'une erreur appropri√©e est g√©n√©r√©e
    const captures = getCaptures();
    const hasError = captures.some(capture => 
        capture.className === 'error' && 
        (capture.text.includes('Fichier ou dossier introuvable') ||
         capture.text.includes('no such file'))
    );
    
    assert.isTrue(hasError, 'Une erreur devrait √™tre g√©n√©r√©e pour pattern sans correspondance');
    
    console.log('‚úÖ Erreur correcte pour wildcard sans correspondance');
    return true;
}

/**
 * Export des tests de wildcards pour mv
 */
export const mvWildcardTests = [
    createTest('mv *.* vers r√©pertoire', testWildcardAllExtensionsToDirectory),
    createTest('mv *.text vers r√©pertoire', testWildcardSpecificExtensionToDirectory),
    createTest('mv .** vers r√©pertoire', testWildcardHiddenFilesToDirectory),
    createTest('mv *.* vers fichier (erreur)', testWildcardMultipleFilesToNonDirectory),
    createTest('mv wildcard un seul match', testWildcardSingleFileMatch),
    createTest('mv wildcard aucun match', testWildcardNoMatch)
];