// test-cases/specs/commands/useradd/debian-compliant.test.js
// Tests complets pour useradd respectant le comportement Debian

import { createTestContext, clearCaptures, getCaptures } from '../../../lib/context.js';
import { assert, validateFileSystem, testUtils } from '../../../lib/helpers.js';
import { createTest } from '../../../lib/runner.js';
import { cmdUseradd } from '../../../../bin/useradd.js';
import { parsePasswdFile, parseGroupFile, getCurrentUser } from '../../../../modules/users/user.service.js';

/**
 * V√©rifie qu'un utilisateur a √©t√© correctement cr√©√© selon les standards Debian
 * @param {Object} context - Contexte de test
 * @param {string} username - Nom d'utilisateur
 * @param {Object} expectedProps - Propri√©t√©s attendues
 * @param {boolean} shouldCreateHome - Si le r√©pertoire home doit √™tre cr√©√©
 */
function assertUserCreatedDebian(context, username, expectedProps = {}, shouldCreateHome = false) {
    const users = parsePasswdFile(context.fileSystem);
    const user = users.find(u => u.username === username);
    
    // V√©rifier que l'utilisateur existe dans /etc/passwd
    assert.isTrue(user !== undefined, `L'utilisateur ${username} devrait exister dans /etc/passwd`);
    
    // V√©rifier les propri√©t√©s par d√©faut Debian
    assert.equals(user.shell, expectedProps.shell || '/bin/bash', 'Shell par d√©faut Debian');
    assert.equals(user.home, expectedProps.home || `/home/${username}`, 'R√©pertoire home par d√©faut');
    assert.equals(user.password, 'x', 'Champ password doit √™tre "x" dans /etc/passwd');
    
    // V√©rifier l'UID
    if (expectedProps.uid !== undefined) {
        assert.equals(user.uid, expectedProps.uid, `UID devrait √™tre ${expectedProps.uid}`);
    } else {
        assert.isTrue(user.uid >= 1000, 'UID devrait √™tre >= 1000 pour les utilisateurs normaux (Debian)');
    }
    
    // V√©rifier le GID
    if (expectedProps.gid !== undefined) {
        assert.equals(user.gid, expectedProps.gid, `GID devrait √™tre ${expectedProps.gid}`);
    } else {
        assert.equals(user.gid, user.uid, 'GID devrait √©galer UID par d√©faut (Debian)');
    }
    
    // V√©rifier l'entr√©e dans /etc/shadow
    const shadowFile = context.fileSystem['/etc/shadow'];
    assert.isTrue(shadowFile !== undefined, '/etc/shadow devrait exister');
    const shadowLines = shadowFile.content.split('\n').filter(line => line.trim());
    const userShadowLine = shadowLines.find(line => line.startsWith(`${username}:`));
    assert.isTrue(userShadowLine !== undefined, `${username} devrait √™tre dans /etc/shadow`);
    assert.isTrue(userShadowLine.includes('!'), 'Mot de passe devrait √™tre verrouill√© (!) dans /etc/shadow');
    
    // V√©rifier la cr√©ation/non-cr√©ation du r√©pertoire home selon le comportement Debian
    const homeExists = context.fileSystem[user.home] !== undefined;
    if (shouldCreateHome) {
        assert.isTrue(homeExists, `Le r√©pertoire home ${user.home} devrait √™tre cr√©√© avec -m`);
        assert.isDirectory(context, user.home, `${user.home} devrait √™tre un r√©pertoire`);
        
        // V√©rifier les permissions et propri√©t√©s du home (Debian)
        const homeDir = context.fileSystem[user.home];
        assert.equals(homeDir.permissions, 'drwxr-xr-x', 'Permissions du home selon Debian');
        assert.equals(homeDir.owner, username, 'Propri√©taire du home');
        assert.equals(homeDir.group, username, 'Groupe du home');
    } else {
        assert.isFalse(homeExists, 
            `‚ùå CRITIQUE DEBIAN: Le r√©pertoire home ${user.home} NE DOIT PAS √™tre cr√©√© sans -m`);
    }
    
    // V√©rifier la cr√©ation du groupe principal (Debian cr√©e un groupe par utilisateur)
    const groups = parseGroupFile(context.fileSystem);
    const userGroup = groups.find(g => g.name === username);
    assert.isTrue(userGroup !== undefined, `Un groupe ${username} devrait √™tre cr√©√© (Debian)`);
    assert.equals(userGroup.gid, user.gid, 'GID du groupe devrait correspondre √† celui de l\'utilisateur');
}

/**
 * TEST 1: Comportement par d√©faut Debian - pas de home sans -m
 */
function testDebianDefaultBehavior() {
    console.log('üß™ TEST CRITIQUE DEBIAN: Comportement par d√©faut (sans -m)');
    
    clearCaptures();
    const context = createTestContext();
    
    // V√©rifier qu'on est root (requis pour useradd)
    const currentUser = getCurrentUser();
    assert.equals(currentUser.username, 'root', 'Tests doivent s\'ex√©cuter en tant que root');
    
    // Cr√©er un utilisateur SANS option -m (comportement par d√©faut Debian)
    cmdUseradd(['debianuser'], context);
    
    // V√©rifier le silence (principe Unix/Debian)
    const captures = getCaptures();
    assert.captureCount(0, 'useradd doit √™tre SILENCIEUX en cas de succ√®s (principe Unix/Debian)');
    
    // V√©rifier la cr√©ation correcte SANS r√©pertoire home
    assertUserCreatedDebian(context, 'debianuser', {}, false);
    
    console.log('‚úÖ DEBIAN CONFORME: Utilisateur cr√©√© sans r√©pertoire home (par d√©faut)');
    return true;
}

/**
 * TEST 2: Option -m cr√©e le r√©pertoire home (Debian)
 */
function testDebianCreateHome() {
    console.log('üß™ TEST DEBIAN: Option -m cr√©e le r√©pertoire home');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er un utilisateur AVEC option -m
    cmdUseradd(['-m', 'homeuser'], context);
    
    // V√©rifier le silence
    const captures = getCaptures();
    assert.captureCount(0, 'useradd -m doit √™tre silencieux en cas de succ√®s');
    
    // V√©rifier la cr√©ation correcte AVEC r√©pertoire home
    assertUserCreatedDebian(context, 'homeuser', {}, true);
    
    console.log('‚úÖ DEBIAN CONFORME: Option -m cr√©e correctement le r√©pertoire home');
    return true;
}

/**
 * TEST 3: Option -M force l'absence de r√©pertoire home
 */
function testDebianNoHome() {
    console.log('üß™ TEST DEBIAN: Option -M emp√™che la cr√©ation du r√©pertoire home');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er un utilisateur avec -M (force pas de home)
    cmdUseradd(['-M', 'nohomeuser'], context);
    
    // V√©rifier le silence
    const captures = getCaptures();
    
    // Debug: afficher les captures pour comprendre le probl√®me
    if (captures.length > 0) {
        console.log('üîç DEBUG captures:', captures.map(c => `${c.className}: ${c.text}`));
    }
    
    assert.captureCount(0, 'useradd -M doit √™tre silencieux en cas de succ√®s');
    
    // V√©rifier la cr√©ation correcte SANS r√©pertoire home (forc√©)
    assertUserCreatedDebian(context, 'nohomeuser', {}, false);
    
    console.log('‚úÖ DEBIAN CONFORME: Option -M emp√™che la cr√©ation du home');
    return true;
}

/**
 * TEST 4: Attribution automatique d'UID selon Debian (‚â• 1000)
 */
function testDebianUIDAllocation() {
    console.log('üß™ TEST DEBIAN: Attribution automatique d\'UID (‚â• 1000)');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er plusieurs utilisateurs pour tester l'allocation d'UID
    cmdUseradd(['user1000'], context);
    cmdUseradd(['user1001'], context);
    cmdUseradd(['user1002'], context);
    
    // V√©rifier le silence pour tous
    const captures = getCaptures();
    assert.captureCount(0, 'Cr√©ations multiples doivent √™tre silencieuses');
    
    // V√©rifier l'allocation s√©quentielle d'UID selon Debian
    const users = parsePasswdFile(context.fileSystem);
    const user1 = users.find(u => u.username === 'user1000');
    const user2 = users.find(u => u.username === 'user1001');
    const user3 = users.find(u => u.username === 'user1002');
    
    // V√©rifier que les UID sont >= 1000 (standard Debian)
    assert.isTrue(user1.uid >= 1000, 'Premier utilisateur doit avoir UID ‚â• 1000');
    assert.isTrue(user2.uid >= 1000, 'Deuxi√®me utilisateur doit avoir UID ‚â• 1000');
    assert.isTrue(user3.uid >= 1000, 'Troisi√®me utilisateur doit avoir UID ‚â• 1000');
    
    // V√©rifier l'allocation s√©quentielle
    assert.isTrue(user2.uid > user1.uid, 'UID doivent √™tre allou√©s de mani√®re croissante');
    assert.isTrue(user3.uid > user2.uid, 'UID doivent √™tre allou√©s de mani√®re croissante');
    
    console.log('‚úÖ DEBIAN CONFORME: Attribution automatique d\'UID (‚â• 1000, s√©quentiel)');
    return true;
}

/**
 * TEST 5: Option -u avec UID sp√©cifique
 */
function testDebianSpecificUID() {
    console.log('üß™ TEST DEBIAN: Option -u avec UID sp√©cifique');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er avec un UID sp√©cifique
    cmdUseradd(['-u', '2000', 'specificuser'], context);
    
    // V√©rifier le silence
    const captures = getCaptures();
    assert.captureCount(0, 'useradd -u doit √™tre silencieux en cas de succ√®s');
    
    // V√©rifier l'UID sp√©cifique
    assertUserCreatedDebian(context, 'specificuser', { uid: 2000 }, false);
    
    console.log('‚úÖ DEBIAN CONFORME: Option -u avec UID sp√©cifique fonctionne');
    return true;
}

/**
 * TEST 6: Option -g avec GID sp√©cifique
 */
function testDebianSpecificGID() {
    console.log('üß™ TEST DEBIAN: Option -g avec GID sp√©cifique');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er avec un GID sp√©cifique
    cmdUseradd(['-g', '3000', 'giduser'], context);
    
    // V√©rifier le silence
    const captures = getCaptures();
    assert.captureCount(0, 'useradd -g doit √™tre silencieux en cas de succ√®s');
    
    // V√©rifier le GID sp√©cifique
    assertUserCreatedDebian(context, 'giduser', { gid: 3000 }, false);
    
    console.log('‚úÖ DEBIAN CONFORME: Option -g avec GID sp√©cifique fonctionne');
    return true;
}

/**
 * TEST 7a: Option -d seule (ne cr√©e pas le r√©pertoire)
 */
function testDebianCustomHomePath() {
    console.log('üß™ TEST DEBIAN: Option -d seule (chemin seulement)');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er avec un r√©pertoire home personnalis√© SANS -m
    cmdUseradd(['-d', '/opt/customuser', 'customuser'], context);
    
    // V√©rifier le silence
    const captures = getCaptures();
    assert.captureCount(0, 'useradd -d doit √™tre silencieux en cas de succ√®s');
    
    // V√©rifier que le chemin est d√©fini mais le r√©pertoire n'est PAS cr√©√©
    const users = parsePasswdFile(context.fileSystem);
    const user = users.find(u => u.username === 'customuser');
    assert.isTrue(user !== undefined, 'customuser devrait √™tre cr√©√©');
    assert.equals(user.home, '/opt/customuser', 'Chemin home personnalis√© devrait √™tre d√©fini');
    
    // DEBIAN: Sans -m, aucun r√©pertoire cr√©√© m√™me avec -d
    const homeExists = context.fileSystem['/opt/customuser'] !== undefined;
    assert.isFalse(homeExists, 'DEBIAN: -d seule ne cr√©e PAS le r√©pertoire');
    
    console.log('‚úÖ DEBIAN CONFORME: Option -d d√©finit le chemin sans cr√©er');
    return true;
}

/**
 * TEST 7b: Option -d avec -m (cr√©e le r√©pertoire personnalis√©)
 */
function testDebianCustomHomeWithM() {
    console.log('üß™ TEST DEBIAN: Option -d avec -m (cr√©e le r√©pertoire)');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er avec un r√©pertoire home personnalis√© AVEC -m
    cmdUseradd(['-d', '/opt/homeuser', '-m', 'homeuser'], context);
    
    // V√©rifier le silence
    const captures = getCaptures();
    assert.captureCount(0, 'useradd -d -m doit √™tre silencieux en cas de succ√®s');
    
    // V√©rifier le r√©pertoire home personnalis√© cr√©√©
    assertUserCreatedDebian(context, 'homeuser', { home: '/opt/homeuser' }, true);
    
    console.log('‚úÖ DEBIAN CONFORME: Option -d avec -m cr√©e le r√©pertoire personnalis√©');
    return true;
}

/**
 * TEST 8: Option -s pour shell personnalis√©
 */
function testDebianCustomShell() {
    console.log('üß™ TEST DEBIAN: Option -s pour shell personnalis√©');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er avec un shell personnalis√©
    cmdUseradd(['-s', '/bin/zsh', 'shelluser'], context);
    
    // V√©rifier le silence
    const captures = getCaptures();
    assert.captureCount(0, 'useradd -s doit √™tre silencieux en cas de succ√®s');
    
    // V√©rifier le shell personnalis√©
    assertUserCreatedDebian(context, 'shelluser', { shell: '/bin/zsh' }, false);
    
    console.log('‚úÖ DEBIAN CONFORME: Option -s avec shell personnalis√©');
    return true;
}

/**
 * TEST 9: Option -c pour commentaire (GECOS)
 */
function testDebianGecos() {
    console.log('üß™ TEST DEBIAN: Option -c pour commentaire (GECOS)');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er avec un commentaire
    cmdUseradd(['-c', 'John Doe,Room 123,+33123456789', 'john'], context);
    
    // V√©rifier le silence
    const captures = getCaptures();
    assert.captureCount(0, 'useradd -c doit √™tre silencieux en cas de succ√®s');
    
    // V√©rifier le commentaire GECOS
    const users = parsePasswdFile(context.fileSystem);
    const user = users.find(u => u.username === 'john');
    assert.equals(user.gecos, 'John Doe,Room 123,+33123456789', 'Commentaire GECOS doit √™tre pr√©serv√©');
    
    console.log('‚úÖ DEBIAN CONFORME: Option -c avec commentaire GECOS');
    return true;
}

/**
 * TEST 10: Validation des noms d'utilisateur selon POSIX/Debian
 */
function testDebianUsernameValidation() {
    console.log('üß™ TEST DEBIAN: Validation des noms d\'utilisateur (POSIX)');
    
    clearCaptures();
    const context = createTestContext();
    
    // Tester des noms valides selon POSIX/Debian
    const validNames = [
        'user123',      // lettres + chiffres
        'test_user',    // underscore
        'admin-backup', // tiret
        '_service',     // commence par underscore
        'a',           // un seul caract√®re
        'web-server1',  // combinaison complexe
    ];
    
    validNames.forEach(name => {
        clearCaptures();
        cmdUseradd([name], context);
        
        // Chaque cr√©ation doit √™tre silencieuse
        const captures = getCaptures();
        assert.captureCount(0, `${name} doit √™tre cr√©√© silencieusement`);
        
        // V√©rifier que l'utilisateur existe
        const users = parsePasswdFile(context.fileSystem);
        const user = users.find(u => u.username === name);
        assert.isTrue(user !== undefined, `${name} devrait √™tre cr√©√©`);
    });
    
    console.log('‚úÖ DEBIAN CONFORME: Validation des noms d\'utilisateur valides');
    return true;
}

/**
 * TEST 11: Rejet des noms d'utilisateur invalides
 */
function testDebianInvalidUsernames() {
    console.log('üß™ TEST DEBIAN: Rejet des noms d\'utilisateur invalides');
    
    const context = createTestContext();
    
    // Tester des noms invalides selon POSIX/Debian
    const invalidNames = [
        '123user',      // commence par chiffre
        'user space',   // contient espace
        'user@host',    // caract√®re sp√©cial
        'UPPERCASE',    // majuscules
        'user.dot',     // point
        '',             // vide
        'a'.repeat(33), // trop long (>32 caract√®res)
        'user/slash',   // slash
        'user:colon',   // deux-points
    ];
    
    invalidNames.forEach(name => {
        clearCaptures();
        cmdUseradd([name], context);
        
        // Chaque tentative doit produire une erreur
        const captures = getCaptures();
        assert.isTrue(captures.length > 0, `${name} doit produire une erreur`);
        
        const hasError = captures.some(cap => 
            cap.className === 'error' && cap.text.includes('nom d\'utilisateur invalide')
        );
        assert.isTrue(hasError, `${name} doit √™tre rejet√© comme invalide`);
        
        // V√©rifier que l'utilisateur n'a PAS √©t√© cr√©√©
        const users = parsePasswdFile(context.fileSystem);
        const user = users.find(u => u.username === name);
        assert.isTrue(user === undefined, `${name} ne devrait PAS √™tre cr√©√©`);
    });
    
    console.log('‚úÖ DEBIAN CONFORME: Rejet des noms d\'utilisateur invalides');
    return true;
}

/**
 * TEST 12: Gestion des erreurs - utilisateur existant
 */
function testDebianDuplicateUser() {
    console.log('üß™ TEST DEBIAN: Gestion d\'erreur - utilisateur existant');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er un utilisateur
    cmdUseradd(['duplicate'], context);
    
    // V√©rifier la cr√©ation silencieuse
    let captures = getCaptures();
    assert.captureCount(0, 'Premi√®re cr√©ation doit √™tre silencieuse');
    
    // Essayer de cr√©er le m√™me utilisateur
    clearCaptures();
    cmdUseradd(['duplicate'], context);
    
    // V√©rifier l'erreur
    captures = getCaptures();
    assert.isTrue(captures.length > 0, 'Duplication doit produire une erreur');
    
    const hasError = captures.some(cap => 
        cap.className === 'error' && cap.text.includes('existe d√©j√†')
    );
    assert.isTrue(hasError, 'Erreur de duplication doit √™tre affich√©e');
    
    console.log('‚úÖ DEBIAN CONFORME: Gestion d\'erreur utilisateur existant');
    return true;
}

/**
 * TEST 13: Gestion des erreurs - UID en conflit
 */
function testDebianUIDConflict() {
    console.log('üß™ TEST DEBIAN: Gestion d\'erreur - UID en conflit');
    
    clearCaptures();
    const context = createTestContext();
    
    // Cr√©er un utilisateur avec UID sp√©cifique
    cmdUseradd(['-u', '5000', 'first'], context);
    
    // V√©rifier la cr√©ation silencieuse
    let captures = getCaptures();
    assert.captureCount(0, 'Premi√®re cr√©ation doit √™tre silencieuse');
    
    // Essayer de cr√©er un autre utilisateur avec le m√™me UID
    clearCaptures();
    cmdUseradd(['-u', '5000', 'second'], context);
    
    // V√©rifier l'erreur
    captures = getCaptures();
    assert.isTrue(captures.length > 0, 'Conflit UID doit produire une erreur');
    
    const hasError = captures.some(cap => 
        cap.className === 'error' && cap.text.includes('UID') && cap.text.includes('d√©j√† utilis√©')
    );
    assert.isTrue(hasError, 'Erreur de conflit UID doit √™tre affich√©e');
    
    console.log('‚úÖ DEBIAN CONFORME: Gestion d\'erreur conflit UID');
    return true;
}

/**
 * TEST 14: Permissions - seul root peut utiliser useradd
 */
function testDebianRootPermission() {
    console.log('üß™ TEST DEBIAN: Permissions - seul root peut utiliser useradd');
    
    // Note: Ce test assume qu'on fonctionne comme root pendant les tests
    // Dans un vrai syst√®me, il faudrait tester avec un utilisateur non-root
    
    clearCaptures();
    const context = createTestContext();
    
    // V√©rifier qu'on est bien root pour les tests
    const currentUser = getCurrentUser();
    assert.equals(currentUser.username, 'root', 'Tests doivent s\'ex√©cuter en tant que root');
    
    // Dans un vrai syst√®me Debian, un utilisateur non-root devrait obtenir:
    // "useradd: Seul root peut ajouter des utilisateurs au syst√®me"
    
    console.log('‚úÖ DEBIAN CONFORME: V√©rification des permissions (tests en tant que root)');
    return true;
}

/**
 * Export des tests conformes au comportement Debian
 */
export const useraddDebianTests = [
    createTest('Comportement par d√©faut Debian (pas de home)', testDebianDefaultBehavior),
    createTest('Option -m cr√©e le home (Debian)', testDebianCreateHome),
    createTest('Option -M emp√™che le home (Debian)', testDebianNoHome),
    createTest('Attribution UID automatique (‚â•1000)', testDebianUIDAllocation),
    createTest('Option -u UID sp√©cifique', testDebianSpecificUID),
    createTest('Option -g GID sp√©cifique', testDebianSpecificGID),
    createTest('Option -d chemin seul', testDebianCustomHomePath),
    createTest('Option -d avec -m cr√©e r√©pertoire', testDebianCustomHomeWithM),
    createTest('Option -s shell personnalis√©', testDebianCustomShell),
    createTest('Option -c commentaire GECOS', testDebianGecos),
    createTest('Validation noms utilisateur valides', testDebianUsernameValidation),
    createTest('Rejet noms utilisateur invalides', testDebianInvalidUsernames),
    createTest('Erreur utilisateur existant', testDebianDuplicateUser),
    createTest('Erreur conflit UID', testDebianUIDConflict),
    createTest('Permissions root uniquement', testDebianRootPermission),
];