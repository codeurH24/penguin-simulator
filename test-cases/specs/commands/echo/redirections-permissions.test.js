// test-cases/specs/commands/echo/redirections-permissions.test.js
// Tests des permissions pour les redirections echo

import { createTestContext, clearCaptures, getCaptures } from '../../../lib/context.js';
import { assert, validateFileSystem, testUtils } from '../../../lib/helpers.js';
import { createTest } from '../../../lib/runner.js';
import { parseCommandLine, parseRedirections } from '../../../../lib/bash-parser.js';
import { executeWithRedirection, hasRedirection, checkRedirectionPermissions } from '../../../../lib/bash-redirections.js';
import { substituteVariablesInArgs } from '../../../../lib/bash-variables.js';
import { cmdEcho } from '../../../../bin/echo.js';
import { cmdUseradd } from '../../../../bin/useradd.js';
import { cmdPasswd } from '../../../../bin/passwd.js';
import { cmdSu } from '../../../../bin/su.js';
import { cmdExit } from '../../../../lib/bash-builtins.js';
import { cmdChmod } from '../../../../bin/chmod.js';
import { cmdMkdir } from '../../../../bin/mkdir/mkdir.js';
import { clearUserStack } from '../../../../modules/users/user-stack.js';

/**
 * Fonction pour ex√©cuter une commande avec redirections dans le contexte de test
 */
function executeCommand(commandString, context) {
    const trimmedCommand = commandString.trim();
    if (!trimmedCommand) {
        return;
    }

    const parts = parseCommandLine(trimmedCommand);
    if (parts.length === 0) {
        return;
    }

    const { command: cmdParts, redirections } = parseRedirections(parts);
    if (cmdParts.length === 0) {
        return;
    }

    const cmd = cmdParts[0];
    let args = cmdParts.slice(1);
    args = substituteVariablesInArgs(args, context);

    // Ex√©cuter avec ou sans redirections
    if (hasRedirection(redirections)) {
        const commandExecutor = () => {
            executeCommandDirect(cmd, args, context);
        };
        executeWithRedirection(commandExecutor, redirections, context);
    } else {
        executeCommandDirect(cmd, args, context);
    }
}

/**
 * Ex√©cute directement la commande sans redirection
 */
function executeCommandDirect(cmd, args, context) {
    if (cmd === 'echo') {
        cmdEcho(args, context);
    } else {
        context.showError(`Command not supported in tests: ${cmd}`);
    }
}

/**
 * Fonction utilitaire pour cr√©er un utilisateur sans mot de passe
 */
function prepareUserWithoutPassword(context, username) {
    cmdUseradd(['-m', username], context);
    cmdPasswd(['-d', username], context);
    clearCaptures();
    return context;
}

/**
 * V√©rifie si une erreur de permission denied a √©t√© captur√©e
 */
function hasPermissionDeniedError(captures) {
    return captures.some(capture => {
        if (capture.className !== 'error') return false;
        const text = capture.text.toLowerCase();
        return text.includes('permission denied') ||
            text.includes('permission refus√©e') ||
            text.includes('acc√®s refus√©');
    });
}

/**
 * TEST 1: echo > fichier - √©chec sans permission d'√©criture dans r√©pertoire parent
 */
function testEchoRedirectCreateNoWritePermissionInDirectory() {
    console.log('üß™ TEST PERMISSIONS: echo > fichier √©choue sans permission d\'√©criture dans r√©pertoire');

    clearCaptures();
    clearUserStack();
    const context = createTestContext();

    // Cr√©er un utilisateur alice
    prepareUserWithoutPassword(context, 'alice');

    // Root cr√©e un r√©pertoire sans permission d'√©criture pour others
    cmdMkdir(['/tmp/readonly'], context);
    cmdChmod(['755', '/tmp/readonly'], context); // rwxr-xr-x (alice peut traverser mais pas √©crire)

    // Passer √† alice
    cmdSu(['alice'], context);

    // alice essaie de cr√©er un fichier dans le r√©pertoire en lecture seule
    clearCaptures();
    executeCommand('echo "test content" > /tmp/readonly/newfile.txt', context);

    const captures = getCaptures();
    const hasPermError = hasPermissionDeniedError(captures);

    // V√©rifier qu'une erreur de permission a √©t√© g√©n√©r√©e
    assert.isTrue(hasPermError, 'Une erreur de permission denied devrait √™tre g√©n√©r√©e');

    // V√©rifier que le fichier n'a pas √©t√© cr√©√©
    assert.fileNotExists(context, '/tmp/readonly/newfile.txt', 'Le fichier ne devrait pas avoir √©t√© cr√©√©');

    console.log('‚úÖ echo > √©choue bien sans permission d\'√©criture dans r√©pertoire');
    return true;
}

/**
 * TEST 2: echo >> fichier - √©chec sans permission d'√©criture sur fichier existant
 */
function testEchoRedirectAppendNoWritePermissionOnFile() {
    console.log('üß™ TEST PERMISSIONS: echo >> fichier √©choue sans permission d\'√©criture sur fichier');

    clearCaptures();
    clearUserStack();
    const context = createTestContext();

    // Cr√©er utilisateurs
    prepareUserWithoutPassword(context, 'alice');
    prepareUserWithoutPassword(context, 'bob');

    // Root cr√©e un fichier appartenant √† alice
    testUtils.createTestFile(context, '/tmp/alice-file.txt', 'contenu initial\n');
    const file = context.fileSystem['/tmp/alice-file.txt'];
    file.owner = 'alice';
    file.group = 'alice';

    // D√©finir permissions lecture seule pour others
    cmdChmod(['644', '/tmp/alice-file.txt'], context); // rw-r--r-- (bob peut lire mais pas √©crire)

    // Passer √† bob
    cmdSu(['bob'], context);

    // bob essaie d'ajouter du contenu au fichier d'alice
    clearCaptures();
    executeCommand('echo "nouveau contenu" >> /tmp/alice-file.txt', context);

    const captures = getCaptures();
    const hasPermError = hasPermissionDeniedError(captures);

    // V√©rifier qu'une erreur de permission a √©t√© g√©n√©r√©e
    assert.isTrue(hasPermError, 'Une erreur de permission denied devrait √™tre g√©n√©r√©e');

    // V√©rifier que le fichier n'a pas √©t√© modifi√©
    const finalFile = context.fileSystem['/tmp/alice-file.txt'];
    assert.equals(finalFile.content, 'contenu initial\n', 'Le fichier ne devrait pas avoir √©t√© modifi√©');

    console.log('‚úÖ echo >> √©choue bien sans permission d\'√©criture sur fichier');
    return true;
}

/**
 * TEST 3: echo > fichier - √©chec en tentant d'√©craser un r√©pertoire
 */
function testEchoRedirectOverwriteDirectory() {
    console.log('üß™ TEST PERMISSIONS: echo > √©choue en tentant d\'√©craser un r√©pertoire');

    clearCaptures();
    const context = createTestContext();

    // Cr√©er un r√©pertoire
    cmdMkdir(['/tmp/testdir'], context);

    // Essayer de rediriger vers le r√©pertoire
    clearCaptures();
    executeCommand('echo "test" > /tmp/testdir', context);

    const captures = getCaptures();

    // V√©rifier qu'une erreur a √©t√© g√©n√©r√©e (pas n√©cessairement "permission denied" mais une erreur)
    const hasError = captures.some(capture => capture.className === 'error');
    assert.isTrue(hasError, 'Une erreur devrait √™tre g√©n√©r√©e en tentant d\'√©craser un r√©pertoire');

    // V√©rifier que le r√©pertoire existe toujours
    assert.fileExists(context, '/tmp/testdir', 'Le r√©pertoire devrait toujours exister');
    assert.isDirectory(context, '/tmp/testdir', 'testdir devrait √™tre un r√©pertoire');

    console.log('‚úÖ echo > √©choue bien en tentant d\'√©craser un r√©pertoire');
    return true;
}

/**
 * TEST 4: echo > fichier - succ√®s avec permissions appropri√©es
 */
function testEchoRedirectCreateWithWritePermission() {
    console.log('üß™ TEST PERMISSIONS: echo > r√©ussit avec permissions d\'√©criture appropri√©es');

    clearCaptures();
    clearUserStack();
    const context = createTestContext();

    // Cr√©er un utilisateur alice
    prepareUserWithoutPassword(context, 'alice');

    // Root cr√©e un r√©pertoire avec permission d'√©criture pour others
    cmdMkdir(['/tmp/writable'], context);
    cmdChmod(['777', '/tmp/writable'], context); // rwxrwxrwx (alice peut √©crire)

    // Passer √† alice
    cmdSu(['alice'], context);

    // alice cr√©e un fichier dans le r√©pertoire accessible en √©criture
    clearCaptures();
    executeCommand('echo "contenu de alice" > /tmp/writable/alice-file.txt', context);

    const captures = getCaptures();
    const hasError = captures.some(capture => capture.className === 'error');

    // Aucune erreur ne devrait √™tre g√©n√©r√©e
    assert.isFalse(hasError, 'Aucune erreur ne devrait √™tre g√©n√©r√©e avec permissions appropri√©es');

    // V√©rifier que le fichier a √©t√© cr√©√© avec le bon contenu
    assert.fileExists(context, '/tmp/writable/alice-file.txt', 'Le fichier devrait avoir √©t√© cr√©√©');
    const file = context.fileSystem['/tmp/writable/alice-file.txt'];
    assert.isTrue(file.content.includes('contenu de alice'), 'Le fichier devrait contenir le bon contenu');

    console.log('‚úÖ echo > r√©ussit bien avec permissions appropri√©es');
    return true;
}

/**
 * TEST 5: echo >> fichier - succ√®s pour propri√©taire avec permission d'√©criture
 */
function testEchoRedirectAppendByOwner() {
    console.log('üß™ TEST PERMISSIONS: echo >> r√©ussit pour propri√©taire du fichier');

    clearCaptures();
    clearUserStack();
    const context = createTestContext();

    // Cr√©er un utilisateur alice
    prepareUserWithoutPassword(context, 'alice');

    // Passer √† alice
    cmdSu(['alice'], context);

    // alice cr√©e un fichier
    executeCommand('echo "premi√®re ligne" > /home/alice/mon-fichier.txt', context);

    // alice ajoute du contenu √† son propre fichier
    clearCaptures();
    executeCommand('echo "deuxi√®me ligne" >> /home/alice/mon-fichier.txt', context);

    const captures = getCaptures();
    const hasError = captures.some(capture => capture.className === 'error');

    // Aucune erreur ne devrait √™tre g√©n√©r√©e
    assert.isFalse(hasError, 'Aucune erreur ne devrait √™tre g√©n√©r√©e pour le propri√©taire');

    // V√©rifier que le contenu a √©t√© ajout√©
    const file = context.fileSystem['/home/alice/mon-fichier.txt'];
    assert.isTrue(file.content.includes('premi√®re ligne'), 'Le fichier devrait contenir la premi√®re ligne');
    assert.isTrue(file.content.includes('deuxi√®me ligne'), 'Le fichier devrait contenir la deuxi√®me ligne');

    console.log('‚úÖ echo >> r√©ussit bien pour le propri√©taire');
    return true;
}

/**
 * TEST 6: Fonction utilitaire checkRedirectionPermissions
 */
function testCheckRedirectionPermissionsUtility() {
    console.log('üß™ TEST PERMISSIONS: Fonction utilitaire checkRedirectionPermissions');

    clearCaptures();
    clearUserStack();
    const context = createTestContext();

    // Cr√©er un utilisateur alice
    prepareUserWithoutPassword(context, 'alice');

    // Root cr√©e des fichiers et r√©pertoires avec diff√©rentes permissions
    testUtils.createTestFile(context, '/tmp/readable.txt', 'contenu');
    cmdChmod(['444', '/tmp/readable.txt'], context); // r--r--r-- (lecture seule)

    cmdMkdir(['/tmp/readonly-dir'], context);
    cmdChmod(['555', '/tmp/readonly-dir'], context); // r-xr-xr-x (pas d'√©criture)

    // Passer √† alice
    cmdSu(['alice'], context);

    // Test 1: Tenter d'√©crire dans un fichier en lecture seule
    let permCheck = checkRedirectionPermissions('/tmp/readable.txt', false, context);
    assert.isFalse(permCheck.allowed, 'Permission devrait √™tre refus√©e pour fichier en lecture seule');
    assert.isTrue(permCheck.reason.includes('No write permission'), 'La raison devrait mentionner les permissions d\'√©criture');

    // Test 2: Tenter de cr√©er un fichier dans un r√©pertoire en lecture seule
    permCheck = checkRedirectionPermissions('/tmp/readonly-dir/newfile.txt', false, context);
    assert.isFalse(permCheck.allowed, 'Permission devrait √™tre refus√©e pour cr√©ation dans r√©pertoire en lecture seule');
    assert.isTrue(permCheck.reason.includes('No write permission in directory'), 'La raison devrait mentionner les permissions du r√©pertoire');

    // Test 3: Tenter d'√©crire dans un r√©pertoire inexistant
    permCheck = checkRedirectionPermissions('/nonexistent/file.txt', false, context);
    assert.isFalse(permCheck.allowed, 'Permission devrait √™tre refus√©e pour r√©pertoire inexistant');
    assert.isTrue(permCheck.reason.includes('does not exist'), 'La raison devrait mentionner que le r√©pertoire n\'existe pas');

    console.log('‚úÖ Fonction utilitaire checkRedirectionPermissions fonctionne correctement');
    return true;
}

/**
 * TEST 7: root peut toujours √©crire (m√™me sur fichiers en lecture seule)
 */
function testRootCanAlwaysWriteWithRedirection() {
    console.log('üß™ TEST PERMISSIONS: root peut toujours √©crire avec redirections');

    clearCaptures();
    clearUserStack();
    const context = createTestContext();

    // Cr√©er un utilisateur alice
    prepareUserWithoutPassword(context, 'alice');

    // Passer √† alice pour cr√©er un fichier en lecture seule
    cmdSu(['alice'], context);
    executeCommand('echo "contenu alice" > /home/alice/readonly.txt', context);
    cmdChmod(['444', '/home/alice/readonly.txt'], context); // r--r--r--

    // Revenir √† root
    cmdExit([], context);

    // root devrait pouvoir √©craser le fichier en lecture seule
    clearCaptures();
    executeCommand('echo "root peut √©crire" > /home/alice/readonly.txt', context);

    const captures = getCaptures();
    const hasError = captures.some(capture => capture.className === 'error');

    // Aucune erreur ne devrait √™tre g√©n√©r√©e pour root
    assert.isFalse(hasError, 'root ne devrait avoir aucune restriction d\'√©criture');

    // V√©rifier que le contenu a √©t√© √©cras√©
    const file = context.fileSystem['/home/alice/readonly.txt'];
    assert.isTrue(file.content.includes('root peut √©crire'), 'root devrait avoir pu √©craser le fichier');

    console.log('‚úÖ root peut bien √©crire partout avec les redirections');
    return true;
}

// Export des tests
export const echoRedirectionsPermissionsTests = [
    createTest('echo > - √©chec sans permission √©criture r√©pertoire', testEchoRedirectCreateNoWritePermissionInDirectory),
    createTest('echo >> - √©chec sans permission √©criture fichier', testEchoRedirectAppendNoWritePermissionOnFile),
    createTest('echo > - √©chec redirection vers r√©pertoire', testEchoRedirectOverwriteDirectory),
    createTest('echo > - succ√®s avec permissions appropri√©es', testEchoRedirectCreateWithWritePermission),
    createTest('echo >> - succ√®s pour propri√©taire', testEchoRedirectAppendByOwner),
    createTest('Fonction utilitaire checkRedirectionPermissions', testCheckRedirectionPermissionsUtility),
    createTest('root peut toujours √©crire avec redirections', testRootCanAlwaysWriteWithRedirection)
];

export default echoRedirectionsPermissionsTests;