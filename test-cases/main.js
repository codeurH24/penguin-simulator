// tests.js - Point d'entr√©e principal des tests
import { runTestSuite, showFinalReport } from './lib/runner.js';

// Import des suites de tests
import { contextTests } from './specs/system/context.test.js';
import { filesystemTests } from './specs/system/filesystem.test.js';
import { stages } from './stages.js';

/**
 * Fonction principale pour lancer tous les tests
 */
async function runAllTests() {
    console.log('üß™ LANCEMENT DE LA SUITE COMPL√àTE DE TESTS');
    console.log('=' .repeat(60));
    
    const startTime = performance.now();
    const suites = [];
    
    try {
        // 1. Tests du contexte (pr√©requis)
        console.log('\nüèóÔ∏è V√©rification du contexte...');
        const contextResults = runTestSuite('Contexte d\'ex√©cution', contextTests);
        suites.push(contextResults);
        
        // 2. Tests du syst√®me de fichiers (pr√©requis) 
        console.log('\nüóÇÔ∏è V√©rification du syst√®me de fichiers...');
        const filesystemResults = runTestSuite('Syst√®me de fichiers', filesystemTests);
        suites.push(filesystemResults);
        
        // Si les tests syst√®me √©chouent, arr√™ter l√†
        if (!contextResults.success || !filesystemResults.success) {
            console.log('\n‚ùå ARR√äT: Les tests du syst√®me ont √©chou√©');
            console.log('Les autres tests ne peuvent pas s\'ex√©cuter sans un syst√®me sain.');
            showFinalReport(suites);
            return false;
        }
        
        stages(suites);
        
    } catch (error) {
        console.error('\nüí• ERREUR FATALE lors de l\'ex√©cution des tests:', error.message);
        console.error(error.stack);
        return false;
    }
    
    // Rapport final
    const endTime = performance.now();
    const totalTime = Math.round(endTime - startTime);
    
    console.log(`\n‚è±Ô∏è Temps total d'ex√©cution: ${totalTime}ms`);
    
    const finalReport = showFinalReport(suites);
    
    // Message de conclusion
    if (finalReport.success) {
        console.log('\nüéâ F√âLICITATIONS! Tous les tests sont pass√©s avec succ√®s!');
        console.log('Le syst√®me de terminal Linux fonctionne correctement.');
    } else {
        console.log('\n‚ö†Ô∏è ATTENTION: Certains tests ont √©chou√©.');
        console.log('V√©rifiez les erreurs ci-dessus et corrigez le code.');
    }
    
    return finalReport.success;
}

/**
 * Fonction pour lancer seulement les tests du syst√®me
 */
function runSystemTests() {
    console.log('üß™ TESTS DU SYST√àME UNIQUEMENT');
    console.log('=' .repeat(40));
    
    const suites = [];
    
    const contextResults = runTestSuite('Contexte d\'ex√©cution', contextTests);
    suites.push(contextResults);
    
    const filesystemResults = runTestSuite('Syst√®me de fichiers', filesystemTests);
    suites.push(filesystemResults);
    
    showFinalReport(suites);
    
    return contextResults.success && filesystemResults.success;
}


// =============================================================================
// EXPORT POUR USAGE EXTERNE
// =============================================================================

// Permettre d'appeler les fonctions depuis la console du navigateur
if (typeof window !== 'undefined') {
    window.testRunner = {
        runAllTests,
        runSystemTests
    };
    
    console.log('\nüí° Fonctions disponibles dans la console:');
    console.log('   window.testRunner.runAllTests()     - Tous les tests');
    console.log('   window.testRunner.runSystemTests()  - Tests syst√®me uniquement');
}

// Export pour Node.js ou autres environnements
export { 
    runAllTests, 
    runSystemTests,
};