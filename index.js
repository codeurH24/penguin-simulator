import { initDB } from './modules/storage.js';
import { getCurrentUser } from './modules/users.js';
import { 
    initTerminalElements, 
    addLine, 
    updatePrompt, 
    setupCommandHistory,
    setupEnterHandler,
    showCommandExecution,
    clearCommandInput,
    isPasswordMode,
    handlePasswordInput
} from './modules/terminal.js';
import { executeCommand as execCommand } from './bin/bash.js';
import { createContext, initContext, getCurrentPath } from './core/context.js';

// Variables locales pour l'historique des commandes
const commandHistory = [];
let historyIndex = -1;

/**
 * Fonction pour ex√©cuter une commande
 * @param {string} command - Commande √† ex√©cuter
 */
function executeCommand(command) {
    const context = createContext();
    showCommandExecution(getCurrentPath(), command, context);

    // D√©l√©guer l'ex√©cution au module commands
    execCommand(command, context);
}

/**
 * Fonction pour naviguer vers le haut dans l'historique
 * @returns {string|undefined} - Commande pr√©c√©dente ou undefined
 */
function handleHistoryUp() {
    if (historyIndex > 0) {
        historyIndex--;
        return commandHistory[historyIndex];
    }
    return undefined;
}

/**
 * Fonction pour naviguer vers le bas dans l'historique
 * @returns {string} - Commande suivante ou cha√Æne vide
 */
function handleHistoryDown() {
    if (historyIndex < commandHistory.length - 1) {
        historyIndex++;
        return commandHistory[historyIndex];
    } else {
        historyIndex = commandHistory.length;
        return '';
    }
}

/**
 * Fonction pour g√©rer l'appui sur Entr√©e
 * @param {string} command - Commande tap√©e
 */
function handleEnterPressed(command) {
    // V√©rifier si on est en mode saisie de mot de passe
    if (isPasswordMode()) {
        // G√©rer la saisie du mot de passe
        const continuePasswordMode = handlePasswordInput(command);
        
        // Vider l'input dans tous les cas
        clearCommandInput();
        
        // Si on sort du mode password, on ne fait rien de plus
        // Si on reste en mode password, on attend la prochaine saisie
        return;
    }
    
    // Mode normal : ex√©cuter la commande
    if (command) {
        commandHistory.push(command);
        historyIndex = commandHistory.length;
        executeCommand(command);
    }
    clearCommandInput();
}

/**
 * Fonction qui retourne le contexte actuel (pour l'autocompl√©tion)
 * @returns {Object} - Contexte actuel
 */
function getContextForCompletion() {
    return createContext();
}

/**
 * Initialisation asynchrone du terminal
 */
async function initTerminal() {
    // Initialiser les √©l√©ments DOM du terminal
    try {
        initTerminalElements();
    } catch (error) {
        console.error('Erreur initialisation terminal:', error);
        return;
    }

    // Initialiser la base de donn√©es AVANT tout
    await initDB();
    
    // Initialiser le contexte (g√®re tout en interne)
    await initContext();
    
    addLine('üë• Syst√®me d\'utilisateurs pr√™t', 'prompt');
    
    // Configurer le prompt et les gestionnaires d'√©v√©nements
    updatePrompt(getCurrentPath(), createContext());
    setupCommandHistory(handleHistoryUp, handleHistoryDown, getContextForCompletion);
    setupEnterHandler(handleEnterPressed);
    
    // Message de bienvenue
    addLine('üêß Terminal Linux simul√© - Debian-style bash shell', 'prompt');
    const currentUser = getCurrentUser();
    addLine(`Connect√© en tant que ${currentUser.username}@bash`, 'prompt');
    addLine('Tapez "help" pour voir les commandes disponibles', 'prompt');
    addLine('', '');
    addLine('üí° Astuce: en mode passwd, tapez votre mot de passe et appuyez sur Entr√©e', 'info');
    addLine('   Utilisez √âchap pour annuler la saisie de mot de passe', 'info');
    
    // Debug: v√©rifier que les fichiers syst√®me sont bien l√†
    const context = createContext();
    console.log('Fichiers syst√®me cr√©√©s:', {
        passwd: !!context.fileSystem['/etc/passwd'],
        shadow: !!context.fileSystem['/etc/shadow'],
        group: !!context.fileSystem['/etc/group']
    });
}

// Lancer l'initialisation
initTerminal();